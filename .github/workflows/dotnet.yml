name: Converter to Nuget Pusher

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - 'samples/json-to-csv/json-to-csv-converter/myCalibration.Converters/**'  
#    paths-ignore:
#      - 'docs/**'
#      - 'schema/**'

  pull_request:
    types: [opened, synchronize, reopened, closed]
    branches:
      - main

jobs:
  build:

    runs-on: windows-latest

    steps:
    
    - name: Auto Increment Semver Action
      uses: MCKanpolat/auto-semver-action@1.0.5
      id: vers
      with:
        releaseType: patch 
        incrementPerCommit: false
        github_token: ${{ secrets.GITHUB_TOKEN }}

    - name: Next Release Number
      run: echo ${{ steps.vers.outputs.version }}
      
    - name: Git Semantic Version
      uses: PaulHatch/semantic-version@v5.0.0-alpha2
      id: versioning
      with:
    # Set to specify a specific branch, default is the current HEAD
        branch: main
    # The prefix to use to identify tags
        tag_prefix: "" # optional, default is v
    # A string which, if present in a git commit, indicates that a change represents a major (breaking) change. Wrap with '/' to match using a regular expression.
    #  major_pattern: # default is (MAJOR)
    # A string which, if present in a git commit, indicates that a change represents a minor (feature) change. Wrap with '/' to match using a regular expression.
    #  minor_pattern: # default is (MINOR)
    # Pattern to use when formatting output version
        version_format: "1.${{steps.vers.outputs.version}}"
    # Path to check for changes. If any changes are detected in the path the 'changed' output will true. Enter multiple paths separated by spaces.
    #  change_path: # optional
    # Use to create a named sub-version. This value will be appended to tags created for this version.
    #  namespace: # optional
    # If true, every commit will be treated as a bump to the version.
   #   bump_each_commit: # default is false
    # If true, the body of commits will also be searched for major/minor patterns to determine the version type.
    #  search_commit_body: # default is false
    # The output method used to generate list of users, 'csv' or 'json'. Default is 'csv'.
    #  user_format_type: # default is csv
    
    - uses: actions/checkout@v3
    
    - name: Read file contents
      id: read_file
      uses: andstor/file-reader-action@v1
      with:
        path: "./samples/json-to-csv/json-to-csv-converter/myCalibration.Converters/myCalibration.Converters.csproj"
    - name: File contents
      run: echo "${ steps.read_file.outputs.contents }"
      
    - name: File Regex Replace
      uses: mingjun97/file-regex-replace@v1
      with:
      # regex to apply(regex)
        regex: '\<Version\>[0-9]+\.[0-9]+\.[0-9]+\<\/Version\>'
      # flags of the regex
      # flags: # optional, default is g
      # replacement string
        replacement: <Version>${{steps.versioning.outputs.version}}</Version>
      # Files to be replaced(regex)
        include: 'myCalibration.Converters.csproj'
      # Files not to be replaced(regex)
      # exclude: # optional, default is .^
      # String file encoding
      # encoding: # optional, default is utf8
      # Path to the folder to be replaced
        path: './samples/json-to-csv/json-to-csv-converter/myCalibration.Converters/'       
    - name: Read file contents 2
      id: read_file2
      uses: andstor/file-reader-action@v1
      with:
        path: "./samples/json-to-csv/json-to-csv-converter/myCalibration.Converters/myCalibration.Converters.csproj"
    - name: File contents 2
      run: echo "${ steps.read_file2.outputs.contents }"
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: 6.0.x
    - name: Restore dependencies
      run: dotnet restore ./samples/json-to-csv/json-to-csv-converter/myCalibration.Converters/myCalibration.Converters.csproj
    - name: Build
      run: dotnet build ./samples/json-to-csv/json-to-csv-converter/myCalibration.Converters/myCalibration.Converters.csproj --no-restore
    - name: Publish NuGet
      # You may pin to the exact commit or the version.
      # uses: brandedoutcast/publish-nuget@c12b8546b67672ee38ac87bea491ac94a587f7cc
      uses: brandedoutcast/publish-nuget@v2.5.5
      with:
        # Filepath of the project to be packaged, relative to root of repository
        PROJECT_FILE_PATH: samples/json-to-csv/json-to-csv-converter/myCalibration.Converters/myCalibration.Converters.csproj
        # NuGet package id, used for version detection & defaults to project name
        #PACKAGE_NAME: # optional
        # Filepath with version info, relative to root of repository & defaults to PROJECT_FILE_PATH
        #VERSION_FILE_PATH: # optional
        # Regex pattern to extract version info in a capturing group
        #VERSION_REGEX: # optional, default is ^\s*<Version>(.*)<\/Version>\s*$
        # Useful with external providers like Nerdbank.GitVersioning, ignores VERSION_FILE_PATH & VERSION_REGEX
        #VERSION_STATIC: # optional
        # Flag to toggle git tagging, enabled by default
        #TAG_COMMIT: # optional, default is true
        # Format of the git tag, [*] gets replaced with actual version
        #TAG_FORMAT: # optional, default is v*
        # API key to authenticate with NuGet server
        NUGET_KEY: ${{secrets.NUGET_API_KEY_FOR_GITHUB}}
        # NuGet server uri hosting the packages, defaults to https://api.nuget.org
        #NUGET_SOURCE: # optional, default is https://api.nuget.org
        # Flag to toggle pushing symbols along with nuget package to the server, disabled by default
        #INCLUDE_SYMBOLS: # optional
