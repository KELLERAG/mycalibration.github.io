# coding: utf-8

"""
    myCalibration OpenAPI 3 Specification

    myCalibration API  # noqa: E501

    OpenAPI spec version: 1.22.178.1
    Contact: engineering@keller-pressure.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Measurement(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'reference': 'str',
        'environment_target': 'dict(str, PhysicalQuantity)',
        'environment': 'dict(str, PhysicalQuantity)',
        'raw': 'dict(str, PhysicalQuantity)',
        'compensated': 'MeasurementCompensated'
    }

    attribute_map = {
        'reference': 'Reference',
        'environment_target': 'EnvironmentTarget',
        'environment': 'Environment',
        'raw': 'Raw',
        'compensated': 'Compensated'
    }

    def __init__(self, reference=None, environment_target=None, environment=None, raw=None, compensated=None):  # noqa: E501
        """Measurement - a model defined in Swagger"""  # noqa: E501
        self._reference = None
        self._environment_target = None
        self._environment = None
        self._raw = None
        self._compensated = None
        self.discriminator = None
        if reference is not None:
            self.reference = reference
        if environment_target is not None:
            self.environment_target = environment_target
        if environment is not None:
            self.environment = environment
        if raw is not None:
            self.raw = raw
        if compensated is not None:
            self.compensated = compensated

    @property
    def reference(self):
        """Gets the reference of this Measurement.  # noqa: E501


        :return: The reference of this Measurement.  # noqa: E501
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this Measurement.


        :param reference: The reference of this Measurement.  # noqa: E501
        :type: str
        """

        self._reference = reference

    @property
    def environment_target(self):
        """Gets the environment_target of this Measurement.  # noqa: E501


        :return: The environment_target of this Measurement.  # noqa: E501
        :rtype: dict(str, PhysicalQuantity)
        """
        return self._environment_target

    @environment_target.setter
    def environment_target(self, environment_target):
        """Sets the environment_target of this Measurement.


        :param environment_target: The environment_target of this Measurement.  # noqa: E501
        :type: dict(str, PhysicalQuantity)
        """

        self._environment_target = environment_target

    @property
    def environment(self):
        """Gets the environment of this Measurement.  # noqa: E501


        :return: The environment of this Measurement.  # noqa: E501
        :rtype: dict(str, PhysicalQuantity)
        """
        return self._environment

    @environment.setter
    def environment(self, environment):
        """Sets the environment of this Measurement.


        :param environment: The environment of this Measurement.  # noqa: E501
        :type: dict(str, PhysicalQuantity)
        """

        self._environment = environment

    @property
    def raw(self):
        """Gets the raw of this Measurement.  # noqa: E501


        :return: The raw of this Measurement.  # noqa: E501
        :rtype: dict(str, PhysicalQuantity)
        """
        return self._raw

    @raw.setter
    def raw(self, raw):
        """Sets the raw of this Measurement.


        :param raw: The raw of this Measurement.  # noqa: E501
        :type: dict(str, PhysicalQuantity)
        """

        self._raw = raw

    @property
    def compensated(self):
        """Gets the compensated of this Measurement.  # noqa: E501


        :return: The compensated of this Measurement.  # noqa: E501
        :rtype: MeasurementCompensated
        """
        return self._compensated

    @compensated.setter
    def compensated(self, compensated):
        """Sets the compensated of this Measurement.


        :param compensated: The compensated of this Measurement.  # noqa: E501
        :type: MeasurementCompensated
        """

        self._compensated = compensated

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Measurement, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Measurement):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
