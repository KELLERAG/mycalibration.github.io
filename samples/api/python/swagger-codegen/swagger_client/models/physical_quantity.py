# coding: utf-8

"""
    myCalibration OpenAPI 3 Specification

    myCalibration API  # noqa: E501

    OpenAPI spec version: 1.22.178.1
    Contact: engineering@keller-druck.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PhysicalQuantity(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'magnitude': 'float',
        'unit': 'PhysicalUnit'
    }

    attribute_map = {
        'magnitude': 'Magnitude',
        'unit': 'Unit'
    }

    def __init__(self, magnitude=None, unit=None):  # noqa: E501
        """PhysicalQuantity - a model defined in Swagger"""  # noqa: E501
        self._magnitude = None
        self._unit = None
        self.discriminator = None
        if magnitude is not None:
            self.magnitude = magnitude
        if unit is not None:
            self.unit = unit

    @property
    def magnitude(self):
        """Gets the magnitude of this PhysicalQuantity.  # noqa: E501


        :return: The magnitude of this PhysicalQuantity.  # noqa: E501
        :rtype: float
        """
        return self._magnitude

    @magnitude.setter
    def magnitude(self, magnitude):
        """Sets the magnitude of this PhysicalQuantity.


        :param magnitude: The magnitude of this PhysicalQuantity.  # noqa: E501
        :type: float
        """

        self._magnitude = magnitude

    @property
    def unit(self):
        """Gets the unit of this PhysicalQuantity.  # noqa: E501


        :return: The unit of this PhysicalQuantity.  # noqa: E501
        :rtype: PhysicalUnit
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this PhysicalQuantity.


        :param unit: The unit of this PhysicalQuantity.  # noqa: E501
        :type: PhysicalUnit
        """

        self._unit = unit

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PhysicalQuantity, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PhysicalQuantity):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
