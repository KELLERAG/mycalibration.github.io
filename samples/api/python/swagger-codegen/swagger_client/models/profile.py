# coding: utf-8

"""
    myCalibration OpenAPI 3 Specification

    myCalibration API  # noqa: E501

    OpenAPI spec version: 1.22.178.1
    Contact: engineering@keller-druck.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Profile(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'company_name': 'str',
        'role': 'str',
        'download_format': 'str',
        'permanent_token': 'str',
        'show_sub_customer': 'bool',
        'sub_customers': 'list[str]'
    }

    attribute_map = {
        'company_name': 'CompanyName',
        'role': 'Role',
        'download_format': 'DownloadFormat',
        'permanent_token': 'PermanentToken',
        'show_sub_customer': 'ShowSubCustomer',
        'sub_customers': 'SubCustomers'
    }

    def __init__(self, company_name=None, role=None, download_format=None, permanent_token=None, show_sub_customer=None, sub_customers=None):  # noqa: E501
        """Profile - a model defined in Swagger"""  # noqa: E501
        self._company_name = None
        self._role = None
        self._download_format = None
        self._permanent_token = None
        self._show_sub_customer = None
        self._sub_customers = None
        self.discriminator = None
        if company_name is not None:
            self.company_name = company_name
        if role is not None:
            self.role = role
        if download_format is not None:
            self.download_format = download_format
        if permanent_token is not None:
            self.permanent_token = permanent_token
        if show_sub_customer is not None:
            self.show_sub_customer = show_sub_customer
        if sub_customers is not None:
            self.sub_customers = sub_customers

    @property
    def company_name(self):
        """Gets the company_name of this Profile.  # noqa: E501


        :return: The company_name of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._company_name

    @company_name.setter
    def company_name(self, company_name):
        """Sets the company_name of this Profile.


        :param company_name: The company_name of this Profile.  # noqa: E501
        :type: str
        """

        self._company_name = company_name

    @property
    def role(self):
        """Gets the role of this Profile.  # noqa: E501


        :return: The role of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this Profile.


        :param role: The role of this Profile.  # noqa: E501
        :type: str
        """

        self._role = role

    @property
    def download_format(self):
        """Gets the download_format of this Profile.  # noqa: E501


        :return: The download_format of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._download_format

    @download_format.setter
    def download_format(self, download_format):
        """Sets the download_format of this Profile.


        :param download_format: The download_format of this Profile.  # noqa: E501
        :type: str
        """

        self._download_format = download_format

    @property
    def permanent_token(self):
        """Gets the permanent_token of this Profile.  # noqa: E501


        :return: The permanent_token of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._permanent_token

    @permanent_token.setter
    def permanent_token(self, permanent_token):
        """Sets the permanent_token of this Profile.


        :param permanent_token: The permanent_token of this Profile.  # noqa: E501
        :type: str
        """

        self._permanent_token = permanent_token

    @property
    def show_sub_customer(self):
        """Gets the show_sub_customer of this Profile.  # noqa: E501


        :return: The show_sub_customer of this Profile.  # noqa: E501
        :rtype: bool
        """
        return self._show_sub_customer

    @show_sub_customer.setter
    def show_sub_customer(self, show_sub_customer):
        """Sets the show_sub_customer of this Profile.


        :param show_sub_customer: The show_sub_customer of this Profile.  # noqa: E501
        :type: bool
        """

        self._show_sub_customer = show_sub_customer

    @property
    def sub_customers(self):
        """Gets the sub_customers of this Profile.  # noqa: E501


        :return: The sub_customers of this Profile.  # noqa: E501
        :rtype: list[str]
        """
        return self._sub_customers

    @sub_customers.setter
    def sub_customers(self, sub_customers):
        """Sets the sub_customers of this Profile.


        :param sub_customers: The sub_customers of this Profile.  # noqa: E501
        :type: list[str]
        """

        self._sub_customers = sub_customers

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Profile, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Profile):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
