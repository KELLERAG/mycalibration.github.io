# coding: utf-8

"""
    myCalibration OpenAPI 3 Specification

    myCalibration API  # noqa: E501

    OpenAPI spec version: 1.22.178.1
    Contact: engineering@keller-druck.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MathematicalModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'model_type': 'str',
        'product_number': 'str',
        'compensated_temperature_range': 'PhysicalQuantityRange',
        'compensated_pressure_range': 'PhysicalQuantityRange',
        'electric_supply': 'PhysicalQuantity',
        'parts': 'dict(str, MathematicalModelPart)'
    }

    attribute_map = {
        'model_type': 'ModelType',
        'product_number': 'ProductNumber',
        'compensated_temperature_range': 'CompensatedTemperatureRange',
        'compensated_pressure_range': 'CompensatedPressureRange',
        'electric_supply': 'ElectricSupply',
        'parts': 'Parts'
    }

    def __init__(self, model_type=None, product_number=None, compensated_temperature_range=None, compensated_pressure_range=None, electric_supply=None, parts=None):  # noqa: E501
        """MathematicalModel - a model defined in Swagger"""  # noqa: E501
        self._model_type = None
        self._product_number = None
        self._compensated_temperature_range = None
        self._compensated_pressure_range = None
        self._electric_supply = None
        self._parts = None
        self.discriminator = None
        if model_type is not None:
            self.model_type = model_type
        if product_number is not None:
            self.product_number = product_number
        if compensated_temperature_range is not None:
            self.compensated_temperature_range = compensated_temperature_range
        if compensated_pressure_range is not None:
            self.compensated_pressure_range = compensated_pressure_range
        if electric_supply is not None:
            self.electric_supply = electric_supply
        if parts is not None:
            self.parts = parts

    @property
    def model_type(self):
        """Gets the model_type of this MathematicalModel.  # noqa: E501


        :return: The model_type of this MathematicalModel.  # noqa: E501
        :rtype: str
        """
        return self._model_type

    @model_type.setter
    def model_type(self, model_type):
        """Sets the model_type of this MathematicalModel.


        :param model_type: The model_type of this MathematicalModel.  # noqa: E501
        :type: str
        """

        self._model_type = model_type

    @property
    def product_number(self):
        """Gets the product_number of this MathematicalModel.  # noqa: E501


        :return: The product_number of this MathematicalModel.  # noqa: E501
        :rtype: str
        """
        return self._product_number

    @product_number.setter
    def product_number(self, product_number):
        """Sets the product_number of this MathematicalModel.


        :param product_number: The product_number of this MathematicalModel.  # noqa: E501
        :type: str
        """

        self._product_number = product_number

    @property
    def compensated_temperature_range(self):
        """Gets the compensated_temperature_range of this MathematicalModel.  # noqa: E501


        :return: The compensated_temperature_range of this MathematicalModel.  # noqa: E501
        :rtype: PhysicalQuantityRange
        """
        return self._compensated_temperature_range

    @compensated_temperature_range.setter
    def compensated_temperature_range(self, compensated_temperature_range):
        """Sets the compensated_temperature_range of this MathematicalModel.


        :param compensated_temperature_range: The compensated_temperature_range of this MathematicalModel.  # noqa: E501
        :type: PhysicalQuantityRange
        """

        self._compensated_temperature_range = compensated_temperature_range

    @property
    def compensated_pressure_range(self):
        """Gets the compensated_pressure_range of this MathematicalModel.  # noqa: E501


        :return: The compensated_pressure_range of this MathematicalModel.  # noqa: E501
        :rtype: PhysicalQuantityRange
        """
        return self._compensated_pressure_range

    @compensated_pressure_range.setter
    def compensated_pressure_range(self, compensated_pressure_range):
        """Sets the compensated_pressure_range of this MathematicalModel.


        :param compensated_pressure_range: The compensated_pressure_range of this MathematicalModel.  # noqa: E501
        :type: PhysicalQuantityRange
        """

        self._compensated_pressure_range = compensated_pressure_range

    @property
    def electric_supply(self):
        """Gets the electric_supply of this MathematicalModel.  # noqa: E501


        :return: The electric_supply of this MathematicalModel.  # noqa: E501
        :rtype: PhysicalQuantity
        """
        return self._electric_supply

    @electric_supply.setter
    def electric_supply(self, electric_supply):
        """Sets the electric_supply of this MathematicalModel.


        :param electric_supply: The electric_supply of this MathematicalModel.  # noqa: E501
        :type: PhysicalQuantity
        """

        self._electric_supply = electric_supply

    @property
    def parts(self):
        """Gets the parts of this MathematicalModel.  # noqa: E501


        :return: The parts of this MathematicalModel.  # noqa: E501
        :rtype: dict(str, MathematicalModelPart)
        """
        return self._parts

    @parts.setter
    def parts(self, parts):
        """Sets the parts of this MathematicalModel.


        :param parts: The parts of this MathematicalModel.  # noqa: E501
        :type: dict(str, MathematicalModelPart)
        """

        self._parts = parts

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MathematicalModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MathematicalModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
