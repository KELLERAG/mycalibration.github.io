# coding: utf-8

"""
    myCalibration OpenAPI 3 Specification

    myCalibration API  # noqa: E501

    OpenAPI spec version: 1.22.178.1
    Contact: engineering@keller-druck.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class CalibrationDataApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def calibration_data_get_calibration_data(self, **kwargs):  # noqa: E501
        """Gathers all filtered data in one JSON response  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.calibration_data_get_calibration_data(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] included_ids: If null: Either are 'ALL SELECTED' or some are unselected (and listed in ExcludedIds)<br />  If not null: None are selected except those that are listed here.<br />  It is not allowed to have IncludedIds AND ExcludedIds have listed values. One most be null or both most be null.<br />  The list of included ids is limited to 50. More than 50 will throw an exception.<br />
        :param list[str] excluded_ids: If null: Either are 'ALL SELECTED' or only some few are selected (and listed in IncludedIds)<br />  If not null: All are selected and except those that are listed here.<br />  It is not allowed to have IncludedIds AND ExcludedIds have listed values. One most be null or both most be null.<br />  The list of excluded ids is limited to 50. More than 50 will throw an exception.<br />
        :param list[str] order_numbers: List of Order Numbers
        :param list[str] order_positions: List of Order Positions
        :param str date_filter_type: One of 'equals', 'greaterThan', 'lessThan', 'notEqual', 'inRange'.<br />  When 'inRange' then 'DateTo' is needed.<br />  Example 1:<br />  \"All data newer than August 1st\" = https://mycalibrationapi.azurewebsites.net/v1/CalibrationData?DateFilterType=greaterThan&Date=2021-08-01<br />  Example 2:<br />  \"All data from the year 2020\" = https://mycalibrationapi.azurewebsites.net/v1/CalibrationData?DateFilterType=inRange&Date=2021-01-01&DateTo=2021-12-31 <br />  Example 3:<br />  \"All data from the first day in January and February\" = https://mycalibrationapi.azurewebsites.net/v1/CalibrationData?DateFilterType=equals&Date=2021-01-01&Date=2021-02-01 <br />
        :param list[str] _date: Dispatch-date text in format 'yyyy-MM-dd' eg. \"2021-12-24\"<br />  Normally, this is a list with one element. Nevertheless, it is possible to GET calibration data from multiple dates. In this case DateFilterType must be 'equals' and DateTo must be null.
        :param str date_to: Used when DateFilterType is 'inRange'.<br />  Data is gathered from 'Date' to 'DateTo'<br />  Date text in format 'yyyy-MM-dd' eg. \"2021-12-24\"
        :param list[str] customer_product_types: To search for [Blanks] use \"blank\"
        :param list[str] pressure_types: Eg. [\"pa\",\"paa\",\"pr\"]  To see all possible enum strings, go to https://mycalibration.github.io/#filter-parameters
        :param list[str] product_series: Eg. [\"10LHP\",\"25Y\",\"46X\",\"K-102\"]
        :param list[str] product_numbers:
        :param str serial_number_search_text: Use this to find all SerialNumbers that contains this text content.
        :param str pressure_min_filter_type: One of 'equals', 'greaterThan', 'lessThan', 'notEqual', 'inRange', 'lessThanOrEqual', 'greaterThanOrEqual'.<br />  When 'inRange' then 'PressureMinTo' is needed.
        :param float pressure_min: The exclusive lower bound of the \"Minimum Pressure\"
        :param float pressure_min_to: The exclusive upper bound of the \"Minimum Pressure\".<br />  Used when PressureMinFilterType is 'inRange'.<br />  Data is gathered from 'PressureMin' to 'PressureMinTo'.<br />  Date text in format 'yyyy-MM-dd' eg. \"2021-12-24\"<br />
        :param str pressure_max_filter_type: One of 'equals', 'greaterThan', 'lessThan', 'notEqual', 'inRange', 'lessThanOrEqual', 'greaterThanOrEqual'.<br />  When 'inRange' then 'PressureMaxTo' is needed.
        :param float pressure_max: The exclusive lower bound of the \"Maximum Pressure\"
        :param float pressure_max_to: The exclusive upper bound of the \"Maximum Pressure\"<br />  Used when PressureMaxFilterType is 'inRange'.<br />  Data is gathered from 'PressureMax' to 'PressureMaxTo'<br />  Date text in format 'yyyy-MM-dd' eg. \"2021-12-24\"
        :param list[str] pressure_unit: <list type=\"string\">List of the Pressure Unit</list>
        :param str temperature_min_filter_type: One of 'equals', 'greaterThan', 'lessThan', 'notEqual', 'inRange', 'lessThanOrEqual', 'greaterThanOrEqual'.<br />  When 'inRange' then 'TemperatureMinTo' is needed.
        :param float temperature_min: The exclusive lower bound of the \"Minimum Temperature\"
        :param float temperature_min_to: The exclusive upper bound of the \"Minimum Temperature\"<br />  Used when TemperatureMinFilterType is 'inRange'.<br />  Data is gathered from 'TemperatureMin' to 'TemperatureMinTo'<br />  Date text in format 'yyyy-MM-dd' eg. \"2021-12-24\"
        :param str temperature_max_filter_type: One of 'equals', 'greaterThan', 'lessThan', 'notEqual', 'inRange', 'lessThanOrEqual', 'greaterThanOrEqual'.<br />  When 'inRange' then 'TemperatureMaxTo' is needed.
        :param float temperature_max: The exclusive lower bound of the \"Maximum Temperature\"
        :param float temperature_max_to: The exclusive upper bound of the \"Maximum Temperature\"<br />  Used when TemperatureMaxFilterType is 'inRange'.<br />  Data is gathered from 'TemperatureMax' to 'TemperatureMaxTo'<br />  Date text in format 'yyyy-MM-dd' eg. \"2021-12-24\"
        :param list[str] temperature_unit: <list type=\"string\">List of the Temperature Unit</list>
        :param str supply_min_filter_type: One of 'equals', 'greaterThan', 'lessThan', 'notEqual', 'inRange', 'lessThanOrEqual', 'greaterThanOrEqual'.<br />  When 'inRange' then 'SupplyMinTo' is needed.<br />  Either Min/Max is used or Magnitude.<br />
        :param float supply_min: The exclusive lower bound of the \"Minimum Supply\"<br />  Either Min/Max is used or Magnitude.
        :param float supply_min_to: The exclusive upper bound of the \"Minimum Supply\"<br />  Used when SupplyMinFilterType is 'inRange'.<br />  Data is gathered from 'SupplyMin' to 'SupplyMinTo'<br />  Date text in format 'yyyy-MM-dd' eg. \"2021-12-24\"<br />  Either Min/Max is used or Magnitude.
        :param str supply_max_filter_type: One of 'equals', 'greaterThan', 'lessThan', 'notEqual', 'inRange', 'lessThanOrEqual', 'greaterThanOrEqual'.<br />  When 'inRange' then 'SupplyMaxTo' is needed.<br />  Either Min/Max is used or Magnitude.
        :param float supply_max: The exclusive lower bound of the \"Maximum Supply\"<br />  Either Min/Max is used or Magnitude.
        :param float supply_max_to: The exclusive upper bound of the \"Maximum Supply\"<br />  Used when SupplyMaxFilterType is 'inRange'.<br />  Data is gathered from 'SupplyMax' to 'SupplyMaxTo'<br />  Date text in format 'yyyy-MM-dd' eg. \"2021-12-24\"<br />  Either Min/Max is used or Magnitude.
        :param str supply_magnitude_filter_type: One of 'equals', 'greaterThan', 'lessThan', 'notEqual', 'inRange', 'lessThanOrEqual', 'greaterThanOrEqual'.<br />  When 'inRange' then 'SupplyMagnitudeTo' is needed.<br />  Either Min/Max is used or Magnitude.
        :param float supply_magnitude: The exclusive lower bound of the \"Supply Magnitude\"<br />  Either Min/Max is used or Magnitude.
        :param float supply_magnitude_to: The exclusive upper bound of the \"Supply Magnitude\"<br />  Used when SupplyMagnitudeFilterType is 'inRange'.<br />  Data is gathered from 'SupplyMagnitude' to 'SupplyMagnitudeTo'<br />  Either Min/Max is used or Magnitude.
        :param list[str] supply_unit: <list type=\"string\">List of the Supply Unit</list>
        :param str customer_reference_number_search_text: Find all data with contains this search text
        :param str customer_order_number_search_text: Find all data with contains this search text
        :param str remarks_search_text: Find all data with contains this search text
        :return: list[KellerSensorData]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.calibration_data_get_calibration_data_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.calibration_data_get_calibration_data_with_http_info(**kwargs)  # noqa: E501
            return data

    def calibration_data_get_calibration_data_with_http_info(self, **kwargs):  # noqa: E501
        """Gathers all filtered data in one JSON response  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.calibration_data_get_calibration_data_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] included_ids: If null: Either are 'ALL SELECTED' or some are unselected (and listed in ExcludedIds)<br />  If not null: None are selected except those that are listed here.<br />  It is not allowed to have IncludedIds AND ExcludedIds have listed values. One most be null or both most be null.<br />  The list of included ids is limited to 50. More than 50 will throw an exception.<br />
        :param list[str] excluded_ids: If null: Either are 'ALL SELECTED' or only some few are selected (and listed in IncludedIds)<br />  If not null: All are selected and except those that are listed here.<br />  It is not allowed to have IncludedIds AND ExcludedIds have listed values. One most be null or both most be null.<br />  The list of excluded ids is limited to 50. More than 50 will throw an exception.<br />
        :param list[str] order_numbers: List of Order Numbers
        :param list[str] order_positions: List of Order Positions
        :param str date_filter_type: One of 'equals', 'greaterThan', 'lessThan', 'notEqual', 'inRange'.<br />  When 'inRange' then 'DateTo' is needed.<br />  Example 1:<br />  \"All data newer than August 1st\" = https://mycalibrationapi.azurewebsites.net/v1/CalibrationData?DateFilterType=greaterThan&Date=2021-08-01<br />  Example 2:<br />  \"All data from the year 2020\" = https://mycalibrationapi.azurewebsites.net/v1/CalibrationData?DateFilterType=inRange&Date=2021-01-01&DateTo=2021-12-31 <br />  Example 3:<br />  \"All data from the first day in January and February\" = https://mycalibrationapi.azurewebsites.net/v1/CalibrationData?DateFilterType=equals&Date=2021-01-01&Date=2021-02-01 <br />
        :param list[str] _date: Dispatch-date text in format 'yyyy-MM-dd' eg. \"2021-12-24\"<br />  Normally, this is a list with one element. Nevertheless, it is possible to GET calibration data from multiple dates. In this case DateFilterType must be 'equals' and DateTo must be null.
        :param str date_to: Used when DateFilterType is 'inRange'.<br />  Data is gathered from 'Date' to 'DateTo'<br />  Date text in format 'yyyy-MM-dd' eg. \"2021-12-24\"
        :param list[str] customer_product_types: To search for [Blanks] use \"blank\"
        :param list[str] pressure_types: Eg. [\"pa\",\"paa\",\"pr\"]  To see all possible enum strings, go to https://mycalibration.github.io/#filter-parameters
        :param list[str] product_series: Eg. [\"10LHP\",\"25Y\",\"46X\",\"K-102\"]
        :param list[str] product_numbers:
        :param str serial_number_search_text: Use this to find all SerialNumbers that contains this text content.
        :param str pressure_min_filter_type: One of 'equals', 'greaterThan', 'lessThan', 'notEqual', 'inRange', 'lessThanOrEqual', 'greaterThanOrEqual'.<br />  When 'inRange' then 'PressureMinTo' is needed.
        :param float pressure_min: The exclusive lower bound of the \"Minimum Pressure\"
        :param float pressure_min_to: The exclusive upper bound of the \"Minimum Pressure\".<br />  Used when PressureMinFilterType is 'inRange'.<br />  Data is gathered from 'PressureMin' to 'PressureMinTo'.<br />  Date text in format 'yyyy-MM-dd' eg. \"2021-12-24\"<br />
        :param str pressure_max_filter_type: One of 'equals', 'greaterThan', 'lessThan', 'notEqual', 'inRange', 'lessThanOrEqual', 'greaterThanOrEqual'.<br />  When 'inRange' then 'PressureMaxTo' is needed.
        :param float pressure_max: The exclusive lower bound of the \"Maximum Pressure\"
        :param float pressure_max_to: The exclusive upper bound of the \"Maximum Pressure\"<br />  Used when PressureMaxFilterType is 'inRange'.<br />  Data is gathered from 'PressureMax' to 'PressureMaxTo'<br />  Date text in format 'yyyy-MM-dd' eg. \"2021-12-24\"
        :param list[str] pressure_unit: <list type=\"string\">List of the Pressure Unit</list>
        :param str temperature_min_filter_type: One of 'equals', 'greaterThan', 'lessThan', 'notEqual', 'inRange', 'lessThanOrEqual', 'greaterThanOrEqual'.<br />  When 'inRange' then 'TemperatureMinTo' is needed.
        :param float temperature_min: The exclusive lower bound of the \"Minimum Temperature\"
        :param float temperature_min_to: The exclusive upper bound of the \"Minimum Temperature\"<br />  Used when TemperatureMinFilterType is 'inRange'.<br />  Data is gathered from 'TemperatureMin' to 'TemperatureMinTo'<br />  Date text in format 'yyyy-MM-dd' eg. \"2021-12-24\"
        :param str temperature_max_filter_type: One of 'equals', 'greaterThan', 'lessThan', 'notEqual', 'inRange', 'lessThanOrEqual', 'greaterThanOrEqual'.<br />  When 'inRange' then 'TemperatureMaxTo' is needed.
        :param float temperature_max: The exclusive lower bound of the \"Maximum Temperature\"
        :param float temperature_max_to: The exclusive upper bound of the \"Maximum Temperature\"<br />  Used when TemperatureMaxFilterType is 'inRange'.<br />  Data is gathered from 'TemperatureMax' to 'TemperatureMaxTo'<br />  Date text in format 'yyyy-MM-dd' eg. \"2021-12-24\"
        :param list[str] temperature_unit: <list type=\"string\">List of the Temperature Unit</list>
        :param str supply_min_filter_type: One of 'equals', 'greaterThan', 'lessThan', 'notEqual', 'inRange', 'lessThanOrEqual', 'greaterThanOrEqual'.<br />  When 'inRange' then 'SupplyMinTo' is needed.<br />  Either Min/Max is used or Magnitude.<br />
        :param float supply_min: The exclusive lower bound of the \"Minimum Supply\"<br />  Either Min/Max is used or Magnitude.
        :param float supply_min_to: The exclusive upper bound of the \"Minimum Supply\"<br />  Used when SupplyMinFilterType is 'inRange'.<br />  Data is gathered from 'SupplyMin' to 'SupplyMinTo'<br />  Date text in format 'yyyy-MM-dd' eg. \"2021-12-24\"<br />  Either Min/Max is used or Magnitude.
        :param str supply_max_filter_type: One of 'equals', 'greaterThan', 'lessThan', 'notEqual', 'inRange', 'lessThanOrEqual', 'greaterThanOrEqual'.<br />  When 'inRange' then 'SupplyMaxTo' is needed.<br />  Either Min/Max is used or Magnitude.
        :param float supply_max: The exclusive lower bound of the \"Maximum Supply\"<br />  Either Min/Max is used or Magnitude.
        :param float supply_max_to: The exclusive upper bound of the \"Maximum Supply\"<br />  Used when SupplyMaxFilterType is 'inRange'.<br />  Data is gathered from 'SupplyMax' to 'SupplyMaxTo'<br />  Date text in format 'yyyy-MM-dd' eg. \"2021-12-24\"<br />  Either Min/Max is used or Magnitude.
        :param str supply_magnitude_filter_type: One of 'equals', 'greaterThan', 'lessThan', 'notEqual', 'inRange', 'lessThanOrEqual', 'greaterThanOrEqual'.<br />  When 'inRange' then 'SupplyMagnitudeTo' is needed.<br />  Either Min/Max is used or Magnitude.
        :param float supply_magnitude: The exclusive lower bound of the \"Supply Magnitude\"<br />  Either Min/Max is used or Magnitude.
        :param float supply_magnitude_to: The exclusive upper bound of the \"Supply Magnitude\"<br />  Used when SupplyMagnitudeFilterType is 'inRange'.<br />  Data is gathered from 'SupplyMagnitude' to 'SupplyMagnitudeTo'<br />  Either Min/Max is used or Magnitude.
        :param list[str] supply_unit: <list type=\"string\">List of the Supply Unit</list>
        :param str customer_reference_number_search_text: Find all data with contains this search text
        :param str customer_order_number_search_text: Find all data with contains this search text
        :param str remarks_search_text: Find all data with contains this search text
        :return: list[KellerSensorData]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['included_ids', 'excluded_ids', 'order_numbers', 'order_positions', 'date_filter_type', '_date', 'date_to', 'customer_product_types', 'pressure_types', 'product_series', 'product_numbers', 'serial_number_search_text', 'pressure_min_filter_type', 'pressure_min', 'pressure_min_to', 'pressure_max_filter_type', 'pressure_max', 'pressure_max_to', 'pressure_unit', 'temperature_min_filter_type', 'temperature_min', 'temperature_min_to', 'temperature_max_filter_type', 'temperature_max', 'temperature_max_to', 'temperature_unit', 'supply_min_filter_type', 'supply_min', 'supply_min_to', 'supply_max_filter_type', 'supply_max', 'supply_max_to', 'supply_magnitude_filter_type', 'supply_magnitude', 'supply_magnitude_to', 'supply_unit', 'customer_reference_number_search_text', 'customer_order_number_search_text', 'remarks_search_text']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method calibration_data_get_calibration_data" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'included_ids' in params:
            query_params.append(('IncludedIds', params['included_ids']))  # noqa: E501
            collection_formats['IncludedIds'] = 'multi'  # noqa: E501
        if 'excluded_ids' in params:
            query_params.append(('ExcludedIds', params['excluded_ids']))  # noqa: E501
            collection_formats['ExcludedIds'] = 'multi'  # noqa: E501
        if 'order_numbers' in params:
            query_params.append(('OrderNumbers', params['order_numbers']))  # noqa: E501
            collection_formats['OrderNumbers'] = 'multi'  # noqa: E501
        if 'order_positions' in params:
            query_params.append(('OrderPositions', params['order_positions']))  # noqa: E501
            collection_formats['OrderPositions'] = 'multi'  # noqa: E501
        if 'date_filter_type' in params:
            query_params.append(('DateFilterType', params['date_filter_type']))  # noqa: E501
        if '_date' in params:
            query_params.append(('Date', params['_date']))  # noqa: E501
            collection_formats['Date'] = 'multi'  # noqa: E501
        if 'date_to' in params:
            query_params.append(('DateTo', params['date_to']))  # noqa: E501
        if 'customer_product_types' in params:
            query_params.append(('CustomerProductTypes', params['customer_product_types']))  # noqa: E501
            collection_formats['CustomerProductTypes'] = 'multi'  # noqa: E501
        if 'pressure_types' in params:
            query_params.append(('PressureTypes', params['pressure_types']))  # noqa: E501
            collection_formats['PressureTypes'] = 'multi'  # noqa: E501
        if 'product_series' in params:
            query_params.append(('ProductSeries', params['product_series']))  # noqa: E501
            collection_formats['ProductSeries'] = 'multi'  # noqa: E501
        if 'product_numbers' in params:
            query_params.append(('ProductNumbers', params['product_numbers']))  # noqa: E501
            collection_formats['ProductNumbers'] = 'multi'  # noqa: E501
        if 'serial_number_search_text' in params:
            query_params.append(('SerialNumberSearchText', params['serial_number_search_text']))  # noqa: E501
        if 'pressure_min_filter_type' in params:
            query_params.append(('PressureMinFilterType', params['pressure_min_filter_type']))  # noqa: E501
        if 'pressure_min' in params:
            query_params.append(('PressureMin', params['pressure_min']))  # noqa: E501
        if 'pressure_min_to' in params:
            query_params.append(('PressureMinTo', params['pressure_min_to']))  # noqa: E501
        if 'pressure_max_filter_type' in params:
            query_params.append(('PressureMaxFilterType', params['pressure_max_filter_type']))  # noqa: E501
        if 'pressure_max' in params:
            query_params.append(('PressureMax', params['pressure_max']))  # noqa: E501
        if 'pressure_max_to' in params:
            query_params.append(('PressureMaxTo', params['pressure_max_to']))  # noqa: E501
        if 'pressure_unit' in params:
            query_params.append(('PressureUnit', params['pressure_unit']))  # noqa: E501
            collection_formats['PressureUnit'] = 'multi'  # noqa: E501
        if 'temperature_min_filter_type' in params:
            query_params.append(('TemperatureMinFilterType', params['temperature_min_filter_type']))  # noqa: E501
        if 'temperature_min' in params:
            query_params.append(('TemperatureMin', params['temperature_min']))  # noqa: E501
        if 'temperature_min_to' in params:
            query_params.append(('TemperatureMinTo', params['temperature_min_to']))  # noqa: E501
        if 'temperature_max_filter_type' in params:
            query_params.append(('TemperatureMaxFilterType', params['temperature_max_filter_type']))  # noqa: E501
        if 'temperature_max' in params:
            query_params.append(('TemperatureMax', params['temperature_max']))  # noqa: E501
        if 'temperature_max_to' in params:
            query_params.append(('TemperatureMaxTo', params['temperature_max_to']))  # noqa: E501
        if 'temperature_unit' in params:
            query_params.append(('TemperatureUnit', params['temperature_unit']))  # noqa: E501
            collection_formats['TemperatureUnit'] = 'multi'  # noqa: E501
        if 'supply_min_filter_type' in params:
            query_params.append(('SupplyMinFilterType', params['supply_min_filter_type']))  # noqa: E501
        if 'supply_min' in params:
            query_params.append(('SupplyMin', params['supply_min']))  # noqa: E501
        if 'supply_min_to' in params:
            query_params.append(('SupplyMinTo', params['supply_min_to']))  # noqa: E501
        if 'supply_max_filter_type' in params:
            query_params.append(('SupplyMaxFilterType', params['supply_max_filter_type']))  # noqa: E501
        if 'supply_max' in params:
            query_params.append(('SupplyMax', params['supply_max']))  # noqa: E501
        if 'supply_max_to' in params:
            query_params.append(('SupplyMaxTo', params['supply_max_to']))  # noqa: E501
        if 'supply_magnitude_filter_type' in params:
            query_params.append(('SupplyMagnitudeFilterType', params['supply_magnitude_filter_type']))  # noqa: E501
        if 'supply_magnitude' in params:
            query_params.append(('SupplyMagnitude', params['supply_magnitude']))  # noqa: E501
        if 'supply_magnitude_to' in params:
            query_params.append(('SupplyMagnitudeTo', params['supply_magnitude_to']))  # noqa: E501
        if 'supply_unit' in params:
            query_params.append(('SupplyUnit', params['supply_unit']))  # noqa: E501
            collection_formats['SupplyUnit'] = 'multi'  # noqa: E501
        if 'customer_reference_number_search_text' in params:
            query_params.append(('CustomerReferenceNumberSearchText', params['customer_reference_number_search_text']))  # noqa: E501
        if 'customer_order_number_search_text' in params:
            query_params.append(('CustomerOrderNumberSearchText', params['customer_order_number_search_text']))  # noqa: E501
        if 'remarks_search_text' in params:
            query_params.append(('RemarksSearchText', params['remarks_search_text']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v1/CalibrationData', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[KellerSensorData]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def calibration_data_get_calibration_data_as_file(self, **kwargs):  # noqa: E501
        """Locates the filtered (optionalSearchParameter) data, bundles them and creates a download link  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.calibration_data_get_calibration_data_as_file(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ExportFileType file_type: 1 = All calibration data items will be merged in one JSON list  2 = All calibration data items will be merged in one JSON list. This JSON file will be compressed to zip file  3 = Every calibration data items will stored as JSON file. All these files will be compressed to one single zip file  4 = Every calibration data items will stored as JSON file. All these files will be compressed to one single brotli file
        :param list[str] included_ids: If null: Either are 'ALL SELECTED' or some are unselected (and listed in ExcludedIds)<br />  If not null: None are selected except those that are listed here.<br />  It is not allowed to have IncludedIds AND ExcludedIds have listed values. One most be null or both most be null.<br />  The list of included ids is limited to 50. More than 50 will throw an exception.<br />
        :param list[str] excluded_ids: If null: Either are 'ALL SELECTED' or only some few are selected (and listed in IncludedIds)<br />  If not null: All are selected and except those that are listed here.<br />  It is not allowed to have IncludedIds AND ExcludedIds have listed values. One most be null or both most be null.<br />  The list of excluded ids is limited to 50. More than 50 will throw an exception.<br />
        :param list[str] order_numbers: List of Order Numbers
        :param list[str] order_positions: List of Order Positions
        :param str date_filter_type: One of 'equals', 'greaterThan', 'lessThan', 'notEqual', 'inRange'.<br />  When 'inRange' then 'DateTo' is needed.<br />  Example 1:<br />  \"All data newer than August 1st\" = https://mycalibrationapi.azurewebsites.net/v1/CalibrationData?DateFilterType=greaterThan&Date=2021-08-01<br />  Example 2:<br />  \"All data from the year 2020\" = https://mycalibrationapi.azurewebsites.net/v1/CalibrationData?DateFilterType=inRange&Date=2021-01-01&DateTo=2021-12-31 <br />  Example 3:<br />  \"All data from the first day in January and February\" = https://mycalibrationapi.azurewebsites.net/v1/CalibrationData?DateFilterType=equals&Date=2021-01-01&Date=2021-02-01 <br />
        :param list[str] _date: Dispatch-date text in format 'yyyy-MM-dd' eg. \"2021-12-24\"<br />  Normally, this is a list with one element. Nevertheless, it is possible to GET calibration data from multiple dates. In this case DateFilterType must be 'equals' and DateTo must be null.
        :param str date_to: Used when DateFilterType is 'inRange'.<br />  Data is gathered from 'Date' to 'DateTo'<br />  Date text in format 'yyyy-MM-dd' eg. \"2021-12-24\"
        :param list[str] customer_product_types: To search for [Blanks] use \"blank\"
        :param list[str] pressure_types: Eg. [\"pa\",\"paa\",\"pr\"]  To see all possible enum strings, go to https://mycalibration.github.io/#filter-parameters
        :param list[str] product_series: Eg. [\"10LHP\",\"25Y\",\"46X\",\"K-102\"]
        :param list[str] product_numbers:
        :param str serial_number_search_text: Use this to find all SerialNumbers that contains this text content.
        :param str pressure_min_filter_type: One of 'equals', 'greaterThan', 'lessThan', 'notEqual', 'inRange', 'lessThanOrEqual', 'greaterThanOrEqual'.<br />  When 'inRange' then 'PressureMinTo' is needed.
        :param float pressure_min: The exclusive lower bound of the \"Minimum Pressure\"
        :param float pressure_min_to: The exclusive upper bound of the \"Minimum Pressure\".<br />  Used when PressureMinFilterType is 'inRange'.<br />  Data is gathered from 'PressureMin' to 'PressureMinTo'.<br />  Date text in format 'yyyy-MM-dd' eg. \"2021-12-24\"<br />
        :param str pressure_max_filter_type: One of 'equals', 'greaterThan', 'lessThan', 'notEqual', 'inRange', 'lessThanOrEqual', 'greaterThanOrEqual'.<br />  When 'inRange' then 'PressureMaxTo' is needed.
        :param float pressure_max: The exclusive lower bound of the \"Maximum Pressure\"
        :param float pressure_max_to: The exclusive upper bound of the \"Maximum Pressure\"<br />  Used when PressureMaxFilterType is 'inRange'.<br />  Data is gathered from 'PressureMax' to 'PressureMaxTo'<br />  Date text in format 'yyyy-MM-dd' eg. \"2021-12-24\"
        :param list[str] pressure_unit: <list type=\"string\">List of the Pressure Unit</list>
        :param str temperature_min_filter_type: One of 'equals', 'greaterThan', 'lessThan', 'notEqual', 'inRange', 'lessThanOrEqual', 'greaterThanOrEqual'.<br />  When 'inRange' then 'TemperatureMinTo' is needed.
        :param float temperature_min: The exclusive lower bound of the \"Minimum Temperature\"
        :param float temperature_min_to: The exclusive upper bound of the \"Minimum Temperature\"<br />  Used when TemperatureMinFilterType is 'inRange'.<br />  Data is gathered from 'TemperatureMin' to 'TemperatureMinTo'<br />  Date text in format 'yyyy-MM-dd' eg. \"2021-12-24\"
        :param str temperature_max_filter_type: One of 'equals', 'greaterThan', 'lessThan', 'notEqual', 'inRange', 'lessThanOrEqual', 'greaterThanOrEqual'.<br />  When 'inRange' then 'TemperatureMaxTo' is needed.
        :param float temperature_max: The exclusive lower bound of the \"Maximum Temperature\"
        :param float temperature_max_to: The exclusive upper bound of the \"Maximum Temperature\"<br />  Used when TemperatureMaxFilterType is 'inRange'.<br />  Data is gathered from 'TemperatureMax' to 'TemperatureMaxTo'<br />  Date text in format 'yyyy-MM-dd' eg. \"2021-12-24\"
        :param list[str] temperature_unit: <list type=\"string\">List of the Temperature Unit</list>
        :param str supply_min_filter_type: One of 'equals', 'greaterThan', 'lessThan', 'notEqual', 'inRange', 'lessThanOrEqual', 'greaterThanOrEqual'.<br />  When 'inRange' then 'SupplyMinTo' is needed.<br />  Either Min/Max is used or Magnitude.<br />
        :param float supply_min: The exclusive lower bound of the \"Minimum Supply\"<br />  Either Min/Max is used or Magnitude.
        :param float supply_min_to: The exclusive upper bound of the \"Minimum Supply\"<br />  Used when SupplyMinFilterType is 'inRange'.<br />  Data is gathered from 'SupplyMin' to 'SupplyMinTo'<br />  Date text in format 'yyyy-MM-dd' eg. \"2021-12-24\"<br />  Either Min/Max is used or Magnitude.
        :param str supply_max_filter_type: One of 'equals', 'greaterThan', 'lessThan', 'notEqual', 'inRange', 'lessThanOrEqual', 'greaterThanOrEqual'.<br />  When 'inRange' then 'SupplyMaxTo' is needed.<br />  Either Min/Max is used or Magnitude.
        :param float supply_max: The exclusive lower bound of the \"Maximum Supply\"<br />  Either Min/Max is used or Magnitude.
        :param float supply_max_to: The exclusive upper bound of the \"Maximum Supply\"<br />  Used when SupplyMaxFilterType is 'inRange'.<br />  Data is gathered from 'SupplyMax' to 'SupplyMaxTo'<br />  Date text in format 'yyyy-MM-dd' eg. \"2021-12-24\"<br />  Either Min/Max is used or Magnitude.
        :param str supply_magnitude_filter_type: One of 'equals', 'greaterThan', 'lessThan', 'notEqual', 'inRange', 'lessThanOrEqual', 'greaterThanOrEqual'.<br />  When 'inRange' then 'SupplyMagnitudeTo' is needed.<br />  Either Min/Max is used or Magnitude.
        :param float supply_magnitude: The exclusive lower bound of the \"Supply Magnitude\"<br />  Either Min/Max is used or Magnitude.
        :param float supply_magnitude_to: The exclusive upper bound of the \"Supply Magnitude\"<br />  Used when SupplyMagnitudeFilterType is 'inRange'.<br />  Data is gathered from 'SupplyMagnitude' to 'SupplyMagnitudeTo'<br />  Either Min/Max is used or Magnitude.
        :param list[str] supply_unit: <list type=\"string\">List of the Supply Unit</list>
        :param str customer_reference_number_search_text: Find all data with contains this search text
        :param str customer_order_number_search_text: Find all data with contains this search text
        :param str remarks_search_text: Find all data with contains this search text
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.calibration_data_get_calibration_data_as_file_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.calibration_data_get_calibration_data_as_file_with_http_info(**kwargs)  # noqa: E501
            return data

    def calibration_data_get_calibration_data_as_file_with_http_info(self, **kwargs):  # noqa: E501
        """Locates the filtered (optionalSearchParameter) data, bundles them and creates a download link  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.calibration_data_get_calibration_data_as_file_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ExportFileType file_type: 1 = All calibration data items will be merged in one JSON list  2 = All calibration data items will be merged in one JSON list. This JSON file will be compressed to zip file  3 = Every calibration data items will stored as JSON file. All these files will be compressed to one single zip file  4 = Every calibration data items will stored as JSON file. All these files will be compressed to one single brotli file
        :param list[str] included_ids: If null: Either are 'ALL SELECTED' or some are unselected (and listed in ExcludedIds)<br />  If not null: None are selected except those that are listed here.<br />  It is not allowed to have IncludedIds AND ExcludedIds have listed values. One most be null or both most be null.<br />  The list of included ids is limited to 50. More than 50 will throw an exception.<br />
        :param list[str] excluded_ids: If null: Either are 'ALL SELECTED' or only some few are selected (and listed in IncludedIds)<br />  If not null: All are selected and except those that are listed here.<br />  It is not allowed to have IncludedIds AND ExcludedIds have listed values. One most be null or both most be null.<br />  The list of excluded ids is limited to 50. More than 50 will throw an exception.<br />
        :param list[str] order_numbers: List of Order Numbers
        :param list[str] order_positions: List of Order Positions
        :param str date_filter_type: One of 'equals', 'greaterThan', 'lessThan', 'notEqual', 'inRange'.<br />  When 'inRange' then 'DateTo' is needed.<br />  Example 1:<br />  \"All data newer than August 1st\" = https://mycalibrationapi.azurewebsites.net/v1/CalibrationData?DateFilterType=greaterThan&Date=2021-08-01<br />  Example 2:<br />  \"All data from the year 2020\" = https://mycalibrationapi.azurewebsites.net/v1/CalibrationData?DateFilterType=inRange&Date=2021-01-01&DateTo=2021-12-31 <br />  Example 3:<br />  \"All data from the first day in January and February\" = https://mycalibrationapi.azurewebsites.net/v1/CalibrationData?DateFilterType=equals&Date=2021-01-01&Date=2021-02-01 <br />
        :param list[str] _date: Dispatch-date text in format 'yyyy-MM-dd' eg. \"2021-12-24\"<br />  Normally, this is a list with one element. Nevertheless, it is possible to GET calibration data from multiple dates. In this case DateFilterType must be 'equals' and DateTo must be null.
        :param str date_to: Used when DateFilterType is 'inRange'.<br />  Data is gathered from 'Date' to 'DateTo'<br />  Date text in format 'yyyy-MM-dd' eg. \"2021-12-24\"
        :param list[str] customer_product_types: To search for [Blanks] use \"blank\"
        :param list[str] pressure_types: Eg. [\"pa\",\"paa\",\"pr\"]  To see all possible enum strings, go to https://mycalibration.github.io/#filter-parameters
        :param list[str] product_series: Eg. [\"10LHP\",\"25Y\",\"46X\",\"K-102\"]
        :param list[str] product_numbers:
        :param str serial_number_search_text: Use this to find all SerialNumbers that contains this text content.
        :param str pressure_min_filter_type: One of 'equals', 'greaterThan', 'lessThan', 'notEqual', 'inRange', 'lessThanOrEqual', 'greaterThanOrEqual'.<br />  When 'inRange' then 'PressureMinTo' is needed.
        :param float pressure_min: The exclusive lower bound of the \"Minimum Pressure\"
        :param float pressure_min_to: The exclusive upper bound of the \"Minimum Pressure\".<br />  Used when PressureMinFilterType is 'inRange'.<br />  Data is gathered from 'PressureMin' to 'PressureMinTo'.<br />  Date text in format 'yyyy-MM-dd' eg. \"2021-12-24\"<br />
        :param str pressure_max_filter_type: One of 'equals', 'greaterThan', 'lessThan', 'notEqual', 'inRange', 'lessThanOrEqual', 'greaterThanOrEqual'.<br />  When 'inRange' then 'PressureMaxTo' is needed.
        :param float pressure_max: The exclusive lower bound of the \"Maximum Pressure\"
        :param float pressure_max_to: The exclusive upper bound of the \"Maximum Pressure\"<br />  Used when PressureMaxFilterType is 'inRange'.<br />  Data is gathered from 'PressureMax' to 'PressureMaxTo'<br />  Date text in format 'yyyy-MM-dd' eg. \"2021-12-24\"
        :param list[str] pressure_unit: <list type=\"string\">List of the Pressure Unit</list>
        :param str temperature_min_filter_type: One of 'equals', 'greaterThan', 'lessThan', 'notEqual', 'inRange', 'lessThanOrEqual', 'greaterThanOrEqual'.<br />  When 'inRange' then 'TemperatureMinTo' is needed.
        :param float temperature_min: The exclusive lower bound of the \"Minimum Temperature\"
        :param float temperature_min_to: The exclusive upper bound of the \"Minimum Temperature\"<br />  Used when TemperatureMinFilterType is 'inRange'.<br />  Data is gathered from 'TemperatureMin' to 'TemperatureMinTo'<br />  Date text in format 'yyyy-MM-dd' eg. \"2021-12-24\"
        :param str temperature_max_filter_type: One of 'equals', 'greaterThan', 'lessThan', 'notEqual', 'inRange', 'lessThanOrEqual', 'greaterThanOrEqual'.<br />  When 'inRange' then 'TemperatureMaxTo' is needed.
        :param float temperature_max: The exclusive lower bound of the \"Maximum Temperature\"
        :param float temperature_max_to: The exclusive upper bound of the \"Maximum Temperature\"<br />  Used when TemperatureMaxFilterType is 'inRange'.<br />  Data is gathered from 'TemperatureMax' to 'TemperatureMaxTo'<br />  Date text in format 'yyyy-MM-dd' eg. \"2021-12-24\"
        :param list[str] temperature_unit: <list type=\"string\">List of the Temperature Unit</list>
        :param str supply_min_filter_type: One of 'equals', 'greaterThan', 'lessThan', 'notEqual', 'inRange', 'lessThanOrEqual', 'greaterThanOrEqual'.<br />  When 'inRange' then 'SupplyMinTo' is needed.<br />  Either Min/Max is used or Magnitude.<br />
        :param float supply_min: The exclusive lower bound of the \"Minimum Supply\"<br />  Either Min/Max is used or Magnitude.
        :param float supply_min_to: The exclusive upper bound of the \"Minimum Supply\"<br />  Used when SupplyMinFilterType is 'inRange'.<br />  Data is gathered from 'SupplyMin' to 'SupplyMinTo'<br />  Date text in format 'yyyy-MM-dd' eg. \"2021-12-24\"<br />  Either Min/Max is used or Magnitude.
        :param str supply_max_filter_type: One of 'equals', 'greaterThan', 'lessThan', 'notEqual', 'inRange', 'lessThanOrEqual', 'greaterThanOrEqual'.<br />  When 'inRange' then 'SupplyMaxTo' is needed.<br />  Either Min/Max is used or Magnitude.
        :param float supply_max: The exclusive lower bound of the \"Maximum Supply\"<br />  Either Min/Max is used or Magnitude.
        :param float supply_max_to: The exclusive upper bound of the \"Maximum Supply\"<br />  Used when SupplyMaxFilterType is 'inRange'.<br />  Data is gathered from 'SupplyMax' to 'SupplyMaxTo'<br />  Date text in format 'yyyy-MM-dd' eg. \"2021-12-24\"<br />  Either Min/Max is used or Magnitude.
        :param str supply_magnitude_filter_type: One of 'equals', 'greaterThan', 'lessThan', 'notEqual', 'inRange', 'lessThanOrEqual', 'greaterThanOrEqual'.<br />  When 'inRange' then 'SupplyMagnitudeTo' is needed.<br />  Either Min/Max is used or Magnitude.
        :param float supply_magnitude: The exclusive lower bound of the \"Supply Magnitude\"<br />  Either Min/Max is used or Magnitude.
        :param float supply_magnitude_to: The exclusive upper bound of the \"Supply Magnitude\"<br />  Used when SupplyMagnitudeFilterType is 'inRange'.<br />  Data is gathered from 'SupplyMagnitude' to 'SupplyMagnitudeTo'<br />  Either Min/Max is used or Magnitude.
        :param list[str] supply_unit: <list type=\"string\">List of the Supply Unit</list>
        :param str customer_reference_number_search_text: Find all data with contains this search text
        :param str customer_order_number_search_text: Find all data with contains this search text
        :param str remarks_search_text: Find all data with contains this search text
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['file_type', 'included_ids', 'excluded_ids', 'order_numbers', 'order_positions', 'date_filter_type', '_date', 'date_to', 'customer_product_types', 'pressure_types', 'product_series', 'product_numbers', 'serial_number_search_text', 'pressure_min_filter_type', 'pressure_min', 'pressure_min_to', 'pressure_max_filter_type', 'pressure_max', 'pressure_max_to', 'pressure_unit', 'temperature_min_filter_type', 'temperature_min', 'temperature_min_to', 'temperature_max_filter_type', 'temperature_max', 'temperature_max_to', 'temperature_unit', 'supply_min_filter_type', 'supply_min', 'supply_min_to', 'supply_max_filter_type', 'supply_max', 'supply_max_to', 'supply_magnitude_filter_type', 'supply_magnitude', 'supply_magnitude_to', 'supply_unit', 'customer_reference_number_search_text', 'customer_order_number_search_text', 'remarks_search_text']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method calibration_data_get_calibration_data_as_file" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'file_type' in params:
            query_params.append(('fileType', params['file_type']))  # noqa: E501
        if 'included_ids' in params:
            query_params.append(('IncludedIds', params['included_ids']))  # noqa: E501
            collection_formats['IncludedIds'] = 'multi'  # noqa: E501
        if 'excluded_ids' in params:
            query_params.append(('ExcludedIds', params['excluded_ids']))  # noqa: E501
            collection_formats['ExcludedIds'] = 'multi'  # noqa: E501
        if 'order_numbers' in params:
            query_params.append(('OrderNumbers', params['order_numbers']))  # noqa: E501
            collection_formats['OrderNumbers'] = 'multi'  # noqa: E501
        if 'order_positions' in params:
            query_params.append(('OrderPositions', params['order_positions']))  # noqa: E501
            collection_formats['OrderPositions'] = 'multi'  # noqa: E501
        if 'date_filter_type' in params:
            query_params.append(('DateFilterType', params['date_filter_type']))  # noqa: E501
        if '_date' in params:
            query_params.append(('Date', params['_date']))  # noqa: E501
            collection_formats['Date'] = 'multi'  # noqa: E501
        if 'date_to' in params:
            query_params.append(('DateTo', params['date_to']))  # noqa: E501
        if 'customer_product_types' in params:
            query_params.append(('CustomerProductTypes', params['customer_product_types']))  # noqa: E501
            collection_formats['CustomerProductTypes'] = 'multi'  # noqa: E501
        if 'pressure_types' in params:
            query_params.append(('PressureTypes', params['pressure_types']))  # noqa: E501
            collection_formats['PressureTypes'] = 'multi'  # noqa: E501
        if 'product_series' in params:
            query_params.append(('ProductSeries', params['product_series']))  # noqa: E501
            collection_formats['ProductSeries'] = 'multi'  # noqa: E501
        if 'product_numbers' in params:
            query_params.append(('ProductNumbers', params['product_numbers']))  # noqa: E501
            collection_formats['ProductNumbers'] = 'multi'  # noqa: E501
        if 'serial_number_search_text' in params:
            query_params.append(('SerialNumberSearchText', params['serial_number_search_text']))  # noqa: E501
        if 'pressure_min_filter_type' in params:
            query_params.append(('PressureMinFilterType', params['pressure_min_filter_type']))  # noqa: E501
        if 'pressure_min' in params:
            query_params.append(('PressureMin', params['pressure_min']))  # noqa: E501
        if 'pressure_min_to' in params:
            query_params.append(('PressureMinTo', params['pressure_min_to']))  # noqa: E501
        if 'pressure_max_filter_type' in params:
            query_params.append(('PressureMaxFilterType', params['pressure_max_filter_type']))  # noqa: E501
        if 'pressure_max' in params:
            query_params.append(('PressureMax', params['pressure_max']))  # noqa: E501
        if 'pressure_max_to' in params:
            query_params.append(('PressureMaxTo', params['pressure_max_to']))  # noqa: E501
        if 'pressure_unit' in params:
            query_params.append(('PressureUnit', params['pressure_unit']))  # noqa: E501
            collection_formats['PressureUnit'] = 'multi'  # noqa: E501
        if 'temperature_min_filter_type' in params:
            query_params.append(('TemperatureMinFilterType', params['temperature_min_filter_type']))  # noqa: E501
        if 'temperature_min' in params:
            query_params.append(('TemperatureMin', params['temperature_min']))  # noqa: E501
        if 'temperature_min_to' in params:
            query_params.append(('TemperatureMinTo', params['temperature_min_to']))  # noqa: E501
        if 'temperature_max_filter_type' in params:
            query_params.append(('TemperatureMaxFilterType', params['temperature_max_filter_type']))  # noqa: E501
        if 'temperature_max' in params:
            query_params.append(('TemperatureMax', params['temperature_max']))  # noqa: E501
        if 'temperature_max_to' in params:
            query_params.append(('TemperatureMaxTo', params['temperature_max_to']))  # noqa: E501
        if 'temperature_unit' in params:
            query_params.append(('TemperatureUnit', params['temperature_unit']))  # noqa: E501
            collection_formats['TemperatureUnit'] = 'multi'  # noqa: E501
        if 'supply_min_filter_type' in params:
            query_params.append(('SupplyMinFilterType', params['supply_min_filter_type']))  # noqa: E501
        if 'supply_min' in params:
            query_params.append(('SupplyMin', params['supply_min']))  # noqa: E501
        if 'supply_min_to' in params:
            query_params.append(('SupplyMinTo', params['supply_min_to']))  # noqa: E501
        if 'supply_max_filter_type' in params:
            query_params.append(('SupplyMaxFilterType', params['supply_max_filter_type']))  # noqa: E501
        if 'supply_max' in params:
            query_params.append(('SupplyMax', params['supply_max']))  # noqa: E501
        if 'supply_max_to' in params:
            query_params.append(('SupplyMaxTo', params['supply_max_to']))  # noqa: E501
        if 'supply_magnitude_filter_type' in params:
            query_params.append(('SupplyMagnitudeFilterType', params['supply_magnitude_filter_type']))  # noqa: E501
        if 'supply_magnitude' in params:
            query_params.append(('SupplyMagnitude', params['supply_magnitude']))  # noqa: E501
        if 'supply_magnitude_to' in params:
            query_params.append(('SupplyMagnitudeTo', params['supply_magnitude_to']))  # noqa: E501
        if 'supply_unit' in params:
            query_params.append(('SupplyUnit', params['supply_unit']))  # noqa: E501
            collection_formats['SupplyUnit'] = 'multi'  # noqa: E501
        if 'customer_reference_number_search_text' in params:
            query_params.append(('CustomerReferenceNumberSearchText', params['customer_reference_number_search_text']))  # noqa: E501
        if 'customer_order_number_search_text' in params:
            query_params.append(('CustomerOrderNumberSearchText', params['customer_order_number_search_text']))  # noqa: E501
        if 'remarks_search_text' in params:
            query_params.append(('RemarksSearchText', params['remarks_search_text']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v1/CalibrationData/Export', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def calibration_data_get_calibration_data_headers(self, **kwargs):  # noqa: E501
        """Get a list with all meta-information.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.calibration_data_get_calibration_data_headers(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int skip: OPTIONAL. Skips the given number of rows. The opposite of Take.
        :param int take: OPTIONAL. Takes only the first .. rows of meta information. The opposite of Skip. When not specified the API tries to get all rows.
        :return: list[MefistoViewModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.calibration_data_get_calibration_data_headers_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.calibration_data_get_calibration_data_headers_with_http_info(**kwargs)  # noqa: E501
            return data

    def calibration_data_get_calibration_data_headers_with_http_info(self, **kwargs):  # noqa: E501
        """Get a list with all meta-information.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.calibration_data_get_calibration_data_headers_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int skip: OPTIONAL. Skips the given number of rows. The opposite of Take.
        :param int take: OPTIONAL. Takes only the first .. rows of meta information. The opposite of Skip. When not specified the API tries to get all rows.
        :return: list[MefistoViewModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['skip', 'take']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method calibration_data_get_calibration_data_headers" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'skip' in params:
            query_params.append(('skip', params['skip']))  # noqa: E501
        if 'take' in params:
            query_params.append(('take', params['take']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v1/CalibrationData/Headers', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[MefistoViewModel]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def calibration_data_sync_calibration_data(self, **kwargs):  # noqa: E501
        """Only used for maintenance reasons. Do not use!  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.calibration_data_sync_calibration_data(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.calibration_data_sync_calibration_data_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.calibration_data_sync_calibration_data_with_http_info(**kwargs)  # noqa: E501
            return data

    def calibration_data_sync_calibration_data_with_http_info(self, **kwargs):  # noqa: E501
        """Only used for maintenance reasons. Do not use!  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.calibration_data_sync_calibration_data_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method calibration_data_sync_calibration_data" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v1/CalibrationData/Sync', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def me_get_me_details(self, **kwargs):  # noqa: E501
        """me_get_me_details  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.me_get_me_details(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.me_get_me_details_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.me_get_me_details_with_http_info(**kwargs)  # noqa: E501
            return data

    def me_get_me_details_with_http_info(self, **kwargs):  # noqa: E501
        """me_get_me_details  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.me_get_me_details_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method me_get_me_details" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v1/Me', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def profile_get_profile(self, **kwargs):  # noqa: E501
        """profile_get_profile  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.profile_get_profile(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: Profile
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.profile_get_profile_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.profile_get_profile_with_http_info(**kwargs)  # noqa: E501
            return data

    def profile_get_profile_with_http_info(self, **kwargs):  # noqa: E501
        """profile_get_profile  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.profile_get_profile_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: Profile
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method profile_get_profile" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v1/Profile', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Profile',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def profile_update_profile(self, **kwargs):  # noqa: E501
        """profile_update_profile  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.profile_update_profile(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str download_format: Either \"zip\" or \"br\" (brotli). \"zip\" is default.
        :param bool show_sub_customer: Default = false
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.profile_update_profile_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.profile_update_profile_with_http_info(**kwargs)  # noqa: E501
            return data

    def profile_update_profile_with_http_info(self, **kwargs):  # noqa: E501
        """profile_update_profile  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.profile_update_profile_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str download_format: Either \"zip\" or \"br\" (brotli). \"zip\" is default.
        :param bool show_sub_customer: Default = false
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['download_format', 'show_sub_customer']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method profile_update_profile" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'download_format' in params:
            query_params.append(('downloadFormat', params['download_format']))  # noqa: E501
        if 'show_sub_customer' in params:
            query_params.append(('showSubCustomer', params['show_sub_customer']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v1/Profile', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sub_customer_update_sub_customers(self, **kwargs):  # noqa: E501
        """sub_customer_update_sub_customers  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sub_customer_update_sub_customers(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sub_customer_number:
        :param list[str] included_ids: If null: Either are 'ALL SELECTED' or some are unselected (and listed in ExcludedIds)<br />  If not null: None are selected except those that are listed here.<br />  It is not allowed to have IncludedIds AND ExcludedIds have listed values. One most be null or both most be null.<br />  The list of included ids is limited to 50. More than 50 will throw an exception.<br />
        :param list[str] excluded_ids: If null: Either are 'ALL SELECTED' or only some few are selected (and listed in IncludedIds)<br />  If not null: All are selected and except those that are listed here.<br />  It is not allowed to have IncludedIds AND ExcludedIds have listed values. One most be null or both most be null.<br />  The list of excluded ids is limited to 50. More than 50 will throw an exception.<br />
        :param list[str] order_numbers: List of Order Numbers
        :param list[str] order_positions: List of Order Positions
        :param str date_filter_type: One of 'equals', 'greaterThan', 'lessThan', 'notEqual', 'inRange'.<br />  When 'inRange' then 'DateTo' is needed.<br />  Example 1:<br />  \"All data newer than August 1st\" = https://mycalibrationapi.azurewebsites.net/v1/CalibrationData?DateFilterType=greaterThan&Date=2021-08-01<br />  Example 2:<br />  \"All data from the year 2020\" = https://mycalibrationapi.azurewebsites.net/v1/CalibrationData?DateFilterType=inRange&Date=2021-01-01&DateTo=2021-12-31 <br />  Example 3:<br />  \"All data from the first day in January and February\" = https://mycalibrationapi.azurewebsites.net/v1/CalibrationData?DateFilterType=equals&Date=2021-01-01&Date=2021-02-01 <br />
        :param list[str] _date: Dispatch-date text in format 'yyyy-MM-dd' eg. \"2021-12-24\"<br />  Normally, this is a list with one element. Nevertheless, it is possible to GET calibration data from multiple dates. In this case DateFilterType must be 'equals' and DateTo must be null.
        :param str date_to: Used when DateFilterType is 'inRange'.<br />  Data is gathered from 'Date' to 'DateTo'<br />  Date text in format 'yyyy-MM-dd' eg. \"2021-12-24\"
        :param list[str] customer_product_types: To search for [Blanks] use \"blank\"
        :param list[str] pressure_types: Eg. [\"pa\",\"paa\",\"pr\"]  To see all possible enum strings, go to https://mycalibration.github.io/#filter-parameters
        :param list[str] product_series: Eg. [\"10LHP\",\"25Y\",\"46X\",\"K-102\"]
        :param list[str] product_numbers:
        :param str serial_number_search_text: Use this to find all SerialNumbers that contains this text content.
        :param str pressure_min_filter_type: One of 'equals', 'greaterThan', 'lessThan', 'notEqual', 'inRange', 'lessThanOrEqual', 'greaterThanOrEqual'.<br />  When 'inRange' then 'PressureMinTo' is needed.
        :param float pressure_min: The exclusive lower bound of the \"Minimum Pressure\"
        :param float pressure_min_to: The exclusive upper bound of the \"Minimum Pressure\".<br />  Used when PressureMinFilterType is 'inRange'.<br />  Data is gathered from 'PressureMin' to 'PressureMinTo'.<br />  Date text in format 'yyyy-MM-dd' eg. \"2021-12-24\"<br />
        :param str pressure_max_filter_type: One of 'equals', 'greaterThan', 'lessThan', 'notEqual', 'inRange', 'lessThanOrEqual', 'greaterThanOrEqual'.<br />  When 'inRange' then 'PressureMaxTo' is needed.
        :param float pressure_max: The exclusive lower bound of the \"Maximum Pressure\"
        :param float pressure_max_to: The exclusive upper bound of the \"Maximum Pressure\"<br />  Used when PressureMaxFilterType is 'inRange'.<br />  Data is gathered from 'PressureMax' to 'PressureMaxTo'<br />  Date text in format 'yyyy-MM-dd' eg. \"2021-12-24\"
        :param list[str] pressure_unit: <list type=\"string\">List of the Pressure Unit</list>
        :param str temperature_min_filter_type: One of 'equals', 'greaterThan', 'lessThan', 'notEqual', 'inRange', 'lessThanOrEqual', 'greaterThanOrEqual'.<br />  When 'inRange' then 'TemperatureMinTo' is needed.
        :param float temperature_min: The exclusive lower bound of the \"Minimum Temperature\"
        :param float temperature_min_to: The exclusive upper bound of the \"Minimum Temperature\"<br />  Used when TemperatureMinFilterType is 'inRange'.<br />  Data is gathered from 'TemperatureMin' to 'TemperatureMinTo'<br />  Date text in format 'yyyy-MM-dd' eg. \"2021-12-24\"
        :param str temperature_max_filter_type: One of 'equals', 'greaterThan', 'lessThan', 'notEqual', 'inRange', 'lessThanOrEqual', 'greaterThanOrEqual'.<br />  When 'inRange' then 'TemperatureMaxTo' is needed.
        :param float temperature_max: The exclusive lower bound of the \"Maximum Temperature\"
        :param float temperature_max_to: The exclusive upper bound of the \"Maximum Temperature\"<br />  Used when TemperatureMaxFilterType is 'inRange'.<br />  Data is gathered from 'TemperatureMax' to 'TemperatureMaxTo'<br />  Date text in format 'yyyy-MM-dd' eg. \"2021-12-24\"
        :param list[str] temperature_unit: <list type=\"string\">List of the Temperature Unit</list>
        :param str supply_min_filter_type: One of 'equals', 'greaterThan', 'lessThan', 'notEqual', 'inRange', 'lessThanOrEqual', 'greaterThanOrEqual'.<br />  When 'inRange' then 'SupplyMinTo' is needed.<br />  Either Min/Max is used or Magnitude.<br />
        :param float supply_min: The exclusive lower bound of the \"Minimum Supply\"<br />  Either Min/Max is used or Magnitude.
        :param float supply_min_to: The exclusive upper bound of the \"Minimum Supply\"<br />  Used when SupplyMinFilterType is 'inRange'.<br />  Data is gathered from 'SupplyMin' to 'SupplyMinTo'<br />  Date text in format 'yyyy-MM-dd' eg. \"2021-12-24\"<br />  Either Min/Max is used or Magnitude.
        :param str supply_max_filter_type: One of 'equals', 'greaterThan', 'lessThan', 'notEqual', 'inRange', 'lessThanOrEqual', 'greaterThanOrEqual'.<br />  When 'inRange' then 'SupplyMaxTo' is needed.<br />  Either Min/Max is used or Magnitude.
        :param float supply_max: The exclusive lower bound of the \"Maximum Supply\"<br />  Either Min/Max is used or Magnitude.
        :param float supply_max_to: The exclusive upper bound of the \"Maximum Supply\"<br />  Used when SupplyMaxFilterType is 'inRange'.<br />  Data is gathered from 'SupplyMax' to 'SupplyMaxTo'<br />  Date text in format 'yyyy-MM-dd' eg. \"2021-12-24\"<br />  Either Min/Max is used or Magnitude.
        :param str supply_magnitude_filter_type: One of 'equals', 'greaterThan', 'lessThan', 'notEqual', 'inRange', 'lessThanOrEqual', 'greaterThanOrEqual'.<br />  When 'inRange' then 'SupplyMagnitudeTo' is needed.<br />  Either Min/Max is used or Magnitude.
        :param float supply_magnitude: The exclusive lower bound of the \"Supply Magnitude\"<br />  Either Min/Max is used or Magnitude.
        :param float supply_magnitude_to: The exclusive upper bound of the \"Supply Magnitude\"<br />  Used when SupplyMagnitudeFilterType is 'inRange'.<br />  Data is gathered from 'SupplyMagnitude' to 'SupplyMagnitudeTo'<br />  Either Min/Max is used or Magnitude.
        :param list[str] supply_unit: <list type=\"string\">List of the Supply Unit</list>
        :param str customer_reference_number_search_text: Find all data with contains this search text
        :param str customer_order_number_search_text: Find all data with contains this search text
        :param str remarks_search_text: Find all data with contains this search text
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sub_customer_update_sub_customers_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.sub_customer_update_sub_customers_with_http_info(**kwargs)  # noqa: E501
            return data

    def sub_customer_update_sub_customers_with_http_info(self, **kwargs):  # noqa: E501
        """sub_customer_update_sub_customers  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sub_customer_update_sub_customers_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sub_customer_number:
        :param list[str] included_ids: If null: Either are 'ALL SELECTED' or some are unselected (and listed in ExcludedIds)<br />  If not null: None are selected except those that are listed here.<br />  It is not allowed to have IncludedIds AND ExcludedIds have listed values. One most be null or both most be null.<br />  The list of included ids is limited to 50. More than 50 will throw an exception.<br />
        :param list[str] excluded_ids: If null: Either are 'ALL SELECTED' or only some few are selected (and listed in IncludedIds)<br />  If not null: All are selected and except those that are listed here.<br />  It is not allowed to have IncludedIds AND ExcludedIds have listed values. One most be null or both most be null.<br />  The list of excluded ids is limited to 50. More than 50 will throw an exception.<br />
        :param list[str] order_numbers: List of Order Numbers
        :param list[str] order_positions: List of Order Positions
        :param str date_filter_type: One of 'equals', 'greaterThan', 'lessThan', 'notEqual', 'inRange'.<br />  When 'inRange' then 'DateTo' is needed.<br />  Example 1:<br />  \"All data newer than August 1st\" = https://mycalibrationapi.azurewebsites.net/v1/CalibrationData?DateFilterType=greaterThan&Date=2021-08-01<br />  Example 2:<br />  \"All data from the year 2020\" = https://mycalibrationapi.azurewebsites.net/v1/CalibrationData?DateFilterType=inRange&Date=2021-01-01&DateTo=2021-12-31 <br />  Example 3:<br />  \"All data from the first day in January and February\" = https://mycalibrationapi.azurewebsites.net/v1/CalibrationData?DateFilterType=equals&Date=2021-01-01&Date=2021-02-01 <br />
        :param list[str] _date: Dispatch-date text in format 'yyyy-MM-dd' eg. \"2021-12-24\"<br />  Normally, this is a list with one element. Nevertheless, it is possible to GET calibration data from multiple dates. In this case DateFilterType must be 'equals' and DateTo must be null.
        :param str date_to: Used when DateFilterType is 'inRange'.<br />  Data is gathered from 'Date' to 'DateTo'<br />  Date text in format 'yyyy-MM-dd' eg. \"2021-12-24\"
        :param list[str] customer_product_types: To search for [Blanks] use \"blank\"
        :param list[str] pressure_types: Eg. [\"pa\",\"paa\",\"pr\"]  To see all possible enum strings, go to https://mycalibration.github.io/#filter-parameters
        :param list[str] product_series: Eg. [\"10LHP\",\"25Y\",\"46X\",\"K-102\"]
        :param list[str] product_numbers:
        :param str serial_number_search_text: Use this to find all SerialNumbers that contains this text content.
        :param str pressure_min_filter_type: One of 'equals', 'greaterThan', 'lessThan', 'notEqual', 'inRange', 'lessThanOrEqual', 'greaterThanOrEqual'.<br />  When 'inRange' then 'PressureMinTo' is needed.
        :param float pressure_min: The exclusive lower bound of the \"Minimum Pressure\"
        :param float pressure_min_to: The exclusive upper bound of the \"Minimum Pressure\".<br />  Used when PressureMinFilterType is 'inRange'.<br />  Data is gathered from 'PressureMin' to 'PressureMinTo'.<br />  Date text in format 'yyyy-MM-dd' eg. \"2021-12-24\"<br />
        :param str pressure_max_filter_type: One of 'equals', 'greaterThan', 'lessThan', 'notEqual', 'inRange', 'lessThanOrEqual', 'greaterThanOrEqual'.<br />  When 'inRange' then 'PressureMaxTo' is needed.
        :param float pressure_max: The exclusive lower bound of the \"Maximum Pressure\"
        :param float pressure_max_to: The exclusive upper bound of the \"Maximum Pressure\"<br />  Used when PressureMaxFilterType is 'inRange'.<br />  Data is gathered from 'PressureMax' to 'PressureMaxTo'<br />  Date text in format 'yyyy-MM-dd' eg. \"2021-12-24\"
        :param list[str] pressure_unit: <list type=\"string\">List of the Pressure Unit</list>
        :param str temperature_min_filter_type: One of 'equals', 'greaterThan', 'lessThan', 'notEqual', 'inRange', 'lessThanOrEqual', 'greaterThanOrEqual'.<br />  When 'inRange' then 'TemperatureMinTo' is needed.
        :param float temperature_min: The exclusive lower bound of the \"Minimum Temperature\"
        :param float temperature_min_to: The exclusive upper bound of the \"Minimum Temperature\"<br />  Used when TemperatureMinFilterType is 'inRange'.<br />  Data is gathered from 'TemperatureMin' to 'TemperatureMinTo'<br />  Date text in format 'yyyy-MM-dd' eg. \"2021-12-24\"
        :param str temperature_max_filter_type: One of 'equals', 'greaterThan', 'lessThan', 'notEqual', 'inRange', 'lessThanOrEqual', 'greaterThanOrEqual'.<br />  When 'inRange' then 'TemperatureMaxTo' is needed.
        :param float temperature_max: The exclusive lower bound of the \"Maximum Temperature\"
        :param float temperature_max_to: The exclusive upper bound of the \"Maximum Temperature\"<br />  Used when TemperatureMaxFilterType is 'inRange'.<br />  Data is gathered from 'TemperatureMax' to 'TemperatureMaxTo'<br />  Date text in format 'yyyy-MM-dd' eg. \"2021-12-24\"
        :param list[str] temperature_unit: <list type=\"string\">List of the Temperature Unit</list>
        :param str supply_min_filter_type: One of 'equals', 'greaterThan', 'lessThan', 'notEqual', 'inRange', 'lessThanOrEqual', 'greaterThanOrEqual'.<br />  When 'inRange' then 'SupplyMinTo' is needed.<br />  Either Min/Max is used or Magnitude.<br />
        :param float supply_min: The exclusive lower bound of the \"Minimum Supply\"<br />  Either Min/Max is used or Magnitude.
        :param float supply_min_to: The exclusive upper bound of the \"Minimum Supply\"<br />  Used when SupplyMinFilterType is 'inRange'.<br />  Data is gathered from 'SupplyMin' to 'SupplyMinTo'<br />  Date text in format 'yyyy-MM-dd' eg. \"2021-12-24\"<br />  Either Min/Max is used or Magnitude.
        :param str supply_max_filter_type: One of 'equals', 'greaterThan', 'lessThan', 'notEqual', 'inRange', 'lessThanOrEqual', 'greaterThanOrEqual'.<br />  When 'inRange' then 'SupplyMaxTo' is needed.<br />  Either Min/Max is used or Magnitude.
        :param float supply_max: The exclusive lower bound of the \"Maximum Supply\"<br />  Either Min/Max is used or Magnitude.
        :param float supply_max_to: The exclusive upper bound of the \"Maximum Supply\"<br />  Used when SupplyMaxFilterType is 'inRange'.<br />  Data is gathered from 'SupplyMax' to 'SupplyMaxTo'<br />  Date text in format 'yyyy-MM-dd' eg. \"2021-12-24\"<br />  Either Min/Max is used or Magnitude.
        :param str supply_magnitude_filter_type: One of 'equals', 'greaterThan', 'lessThan', 'notEqual', 'inRange', 'lessThanOrEqual', 'greaterThanOrEqual'.<br />  When 'inRange' then 'SupplyMagnitudeTo' is needed.<br />  Either Min/Max is used or Magnitude.
        :param float supply_magnitude: The exclusive lower bound of the \"Supply Magnitude\"<br />  Either Min/Max is used or Magnitude.
        :param float supply_magnitude_to: The exclusive upper bound of the \"Supply Magnitude\"<br />  Used when SupplyMagnitudeFilterType is 'inRange'.<br />  Data is gathered from 'SupplyMagnitude' to 'SupplyMagnitudeTo'<br />  Either Min/Max is used or Magnitude.
        :param list[str] supply_unit: <list type=\"string\">List of the Supply Unit</list>
        :param str customer_reference_number_search_text: Find all data with contains this search text
        :param str customer_order_number_search_text: Find all data with contains this search text
        :param str remarks_search_text: Find all data with contains this search text
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sub_customer_number', 'included_ids', 'excluded_ids', 'order_numbers', 'order_positions', 'date_filter_type', '_date', 'date_to', 'customer_product_types', 'pressure_types', 'product_series', 'product_numbers', 'serial_number_search_text', 'pressure_min_filter_type', 'pressure_min', 'pressure_min_to', 'pressure_max_filter_type', 'pressure_max', 'pressure_max_to', 'pressure_unit', 'temperature_min_filter_type', 'temperature_min', 'temperature_min_to', 'temperature_max_filter_type', 'temperature_max', 'temperature_max_to', 'temperature_unit', 'supply_min_filter_type', 'supply_min', 'supply_min_to', 'supply_max_filter_type', 'supply_max', 'supply_max_to', 'supply_magnitude_filter_type', 'supply_magnitude', 'supply_magnitude_to', 'supply_unit', 'customer_reference_number_search_text', 'customer_order_number_search_text', 'remarks_search_text']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sub_customer_update_sub_customers" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'sub_customer_number' in params:
            query_params.append(('subCustomerNumber', params['sub_customer_number']))  # noqa: E501
        if 'included_ids' in params:
            query_params.append(('IncludedIds', params['included_ids']))  # noqa: E501
            collection_formats['IncludedIds'] = 'multi'  # noqa: E501
        if 'excluded_ids' in params:
            query_params.append(('ExcludedIds', params['excluded_ids']))  # noqa: E501
            collection_formats['ExcludedIds'] = 'multi'  # noqa: E501
        if 'order_numbers' in params:
            query_params.append(('OrderNumbers', params['order_numbers']))  # noqa: E501
            collection_formats['OrderNumbers'] = 'multi'  # noqa: E501
        if 'order_positions' in params:
            query_params.append(('OrderPositions', params['order_positions']))  # noqa: E501
            collection_formats['OrderPositions'] = 'multi'  # noqa: E501
        if 'date_filter_type' in params:
            query_params.append(('DateFilterType', params['date_filter_type']))  # noqa: E501
        if '_date' in params:
            query_params.append(('Date', params['_date']))  # noqa: E501
            collection_formats['Date'] = 'multi'  # noqa: E501
        if 'date_to' in params:
            query_params.append(('DateTo', params['date_to']))  # noqa: E501
        if 'customer_product_types' in params:
            query_params.append(('CustomerProductTypes', params['customer_product_types']))  # noqa: E501
            collection_formats['CustomerProductTypes'] = 'multi'  # noqa: E501
        if 'pressure_types' in params:
            query_params.append(('PressureTypes', params['pressure_types']))  # noqa: E501
            collection_formats['PressureTypes'] = 'multi'  # noqa: E501
        if 'product_series' in params:
            query_params.append(('ProductSeries', params['product_series']))  # noqa: E501
            collection_formats['ProductSeries'] = 'multi'  # noqa: E501
        if 'product_numbers' in params:
            query_params.append(('ProductNumbers', params['product_numbers']))  # noqa: E501
            collection_formats['ProductNumbers'] = 'multi'  # noqa: E501
        if 'serial_number_search_text' in params:
            query_params.append(('SerialNumberSearchText', params['serial_number_search_text']))  # noqa: E501
        if 'pressure_min_filter_type' in params:
            query_params.append(('PressureMinFilterType', params['pressure_min_filter_type']))  # noqa: E501
        if 'pressure_min' in params:
            query_params.append(('PressureMin', params['pressure_min']))  # noqa: E501
        if 'pressure_min_to' in params:
            query_params.append(('PressureMinTo', params['pressure_min_to']))  # noqa: E501
        if 'pressure_max_filter_type' in params:
            query_params.append(('PressureMaxFilterType', params['pressure_max_filter_type']))  # noqa: E501
        if 'pressure_max' in params:
            query_params.append(('PressureMax', params['pressure_max']))  # noqa: E501
        if 'pressure_max_to' in params:
            query_params.append(('PressureMaxTo', params['pressure_max_to']))  # noqa: E501
        if 'pressure_unit' in params:
            query_params.append(('PressureUnit', params['pressure_unit']))  # noqa: E501
            collection_formats['PressureUnit'] = 'multi'  # noqa: E501
        if 'temperature_min_filter_type' in params:
            query_params.append(('TemperatureMinFilterType', params['temperature_min_filter_type']))  # noqa: E501
        if 'temperature_min' in params:
            query_params.append(('TemperatureMin', params['temperature_min']))  # noqa: E501
        if 'temperature_min_to' in params:
            query_params.append(('TemperatureMinTo', params['temperature_min_to']))  # noqa: E501
        if 'temperature_max_filter_type' in params:
            query_params.append(('TemperatureMaxFilterType', params['temperature_max_filter_type']))  # noqa: E501
        if 'temperature_max' in params:
            query_params.append(('TemperatureMax', params['temperature_max']))  # noqa: E501
        if 'temperature_max_to' in params:
            query_params.append(('TemperatureMaxTo', params['temperature_max_to']))  # noqa: E501
        if 'temperature_unit' in params:
            query_params.append(('TemperatureUnit', params['temperature_unit']))  # noqa: E501
            collection_formats['TemperatureUnit'] = 'multi'  # noqa: E501
        if 'supply_min_filter_type' in params:
            query_params.append(('SupplyMinFilterType', params['supply_min_filter_type']))  # noqa: E501
        if 'supply_min' in params:
            query_params.append(('SupplyMin', params['supply_min']))  # noqa: E501
        if 'supply_min_to' in params:
            query_params.append(('SupplyMinTo', params['supply_min_to']))  # noqa: E501
        if 'supply_max_filter_type' in params:
            query_params.append(('SupplyMaxFilterType', params['supply_max_filter_type']))  # noqa: E501
        if 'supply_max' in params:
            query_params.append(('SupplyMax', params['supply_max']))  # noqa: E501
        if 'supply_max_to' in params:
            query_params.append(('SupplyMaxTo', params['supply_max_to']))  # noqa: E501
        if 'supply_magnitude_filter_type' in params:
            query_params.append(('SupplyMagnitudeFilterType', params['supply_magnitude_filter_type']))  # noqa: E501
        if 'supply_magnitude' in params:
            query_params.append(('SupplyMagnitude', params['supply_magnitude']))  # noqa: E501
        if 'supply_magnitude_to' in params:
            query_params.append(('SupplyMagnitudeTo', params['supply_magnitude_to']))  # noqa: E501
        if 'supply_unit' in params:
            query_params.append(('SupplyUnit', params['supply_unit']))  # noqa: E501
            collection_formats['SupplyUnit'] = 'multi'  # noqa: E501
        if 'customer_reference_number_search_text' in params:
            query_params.append(('CustomerReferenceNumberSearchText', params['customer_reference_number_search_text']))  # noqa: E501
        if 'customer_order_number_search_text' in params:
            query_params.append(('CustomerOrderNumberSearchText', params['customer_order_number_search_text']))  # noqa: E501
        if 'remarks_search_text' in params:
            query_params.append(('RemarksSearchText', params['remarks_search_text']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v1/SubCustomer', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
